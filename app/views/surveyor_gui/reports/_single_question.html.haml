- if q.display_type == 'label'
- else
  = render "question_number", q: q
  - if [:pick_one,:pick_any,:dropdown,:number,:date,:datetime,:time,:stars,:slider].include? q.question_type_id
    %tr{:class => q.surveyresponse_class(@trial_response_sets)}
      %td &nbsp;
    %tr{:class => q.surveyresponse_class(@trial_response_sets)}
      %td
      %td
      %td
        - if q.display_type=='stars'
          - 10.times.each do |index|
            %input{name: "star#{q.id.to_s}", type: "radio", class: "star {split:2}", disabled: "disabled", checked: (index+1)==star_average(@responses,q) ? "checked" : nil} 
        - else
          %div{:id => "hi_chart#{q.id}", :style => "height:410px; margin: 0; clear:both; min-width: 800px"}
            = high_chart("hi_chart"+q.id.to_s , @chart[q.id.to_s]) do
              - if q.pick == 'one'
                = "options.tooltip.formatter = function() {return '<b>'+ this.point.name +'</b>: '+ this.y;}".html_safe
                = "options.plotOptions.pie.dataLabels = {}".html_safe
                = "options.plotOptions.pie.dataLabels.formatter = function() {return '<b>'+ this.point.name +'</b>: '+ this.percentage.toFixed()+' %';}".html_safe
              - else
                = "options.tooltip.formatter = function() {return '<b>'+ this.x +'</b>: '+ this.y;}".html_safe
    %tr
      %td &nbsp;
    - if [:number,:date,:datetime,:time].include? q.question_type_id
      = render "report_data", q: q
      %tr
        %td
        %td
        %td
          %table.report_data_function
            - response_formatter = ReportFormatter.new(q, @responses)
            - if q.question_type_id == :numbers
              %tr
                %td{:style => "font-weight:bold;"} Total
                %td.table_number
                  = q.prefix
                  = response_formatter.stats(:sum) 
                  \&nbsp;#{q.suffix}
            %tr
              %td{:style => "font-weight:bold;"} Min
              %td.table_number
                = q.prefix
                = response_formatter.stats(:min) 
                \&nbsp;#{q.suffix}
            %tr
              %td{:style => "font-weight:bold;"} Max
              %td.table_number
                = q.prefix
                = response_formatter.stats(:max) 
                \&nbsp;#{q.suffix}
            %tr
              %td{:style => "font-weight:bold;"} Average
              %td.table_number
                = q.prefix
                = response_formatter.stats(:average) 
                \&nbsp;#{q.suffix}
    - elsif q.question_type_id == :stars
      %tr.report_data.report_data_display
        %td
        %td
        %td
          %table
            %tr{:style => "font-weight:bold;"}
              %td User Id
              %td Response
            - @responses.where(:question_id => q.id).each do |r|
              %tr
                %td= r.response_set.user_id
                %td
                  - 5.times.each do |index|
                    %input{name: "star#{'d1'+r.id.to_s}", type: "radio", class: "star", disabled: "disabled", checked:  ( (index+1)== r.integer_value ? "checked" : nil )}
                                                                                                                                                                              
    - elsif q.pick=='any' || q.pick=='one'            
      = render "report_data", q: q
      %tr
        %td
        %td
        %td
          %table.report_data_functions
            %tr
              %td{:style => "font-weight:bold;"}
                Answer
              %td{:style => "font-weight:bold;"}
                Count
            - q.answers.each do |answer| 
              %tr
                %td
                  = answer.text
                %td.table_number
                  = @responses.where(question_id: q.id, answer_id: answer.id).count
    - else
      %tr.report_data.report_data_display
        %td
        %td
        %td
          %table
            %tr{:style => "font-weight:bold;"}
              %td User Id
              %td Response
            - @responses.where(:question_id => q.id).each do |r|
              %tr
                %td= r.response_set.user_id
                %td
                  = r.answers.first.text
    %tr
      %td &nbsp;
  - elsif q.answers.first.response_class == 'blob'
    This question was used for file uploads.
    %br
  - else
    %tr
      %td
      %td
      %td
        %table
          %tr{:style => "font-weight:bold;"}
            %td User Id
            %td Response
          - @responses.where(:question_id => q.id).each do |r|
            %tr
              %td= r.response_set.user_id
              %td= r.datetime_value.blank? ? r.response_value : r.response_value.strftime('%m/%d/%y')
    %tr
      %td &nbsp;
