- @question_no = 1
%table
  - @survey.survey_sections.each do |ss|
    %tr
      %td{:colspan => "3"}
        %h3= ss.title
    %tr
    - ss.questions.each do |q|
      - if q.display_type == 'label'
      - else
        %tr{:class => q.surveyresponse_class(@trial_response_sets)}
          %td
          %td{:colspan => "2"}
            = @question_no
            )&nbsp;#{q.text}
          - @question_no += 1
        - if q.pick == 'any' || q.pick == 'one' || q.answers.first.response_class == 'integer' || q.answers.first.response_class == 'float'
          %tr{:class => q.surveyresponse_class(@trial_response_sets)}
            %td &nbsp;
          %tr{:class => q.surveyresponse_class(@trial_response_sets)}
            %td
            %td
            %td
              - if q.display_type=='stars'
                - 10.times.each do |index|
                  %input {name: "star#{q.id.to_s}", type: "radio", class: "star {split:2}", disabled: "disabled", checked: (index+1)==star_average(@responses,q) ? "checked" : nil} 
              - else
                %div{:id => "hi_chart#{q.id}", :style => "height:410px; margin: 0 2em; clear:both; min-width: 800px"}
                  = high_chart("hi_chart"+q.id.to_s , @chart[q.id.to_s]) do
                    - if q.pick == 'one'
                      = "options.tooltip.formatter = function() {return '<b>'+ this.point.name +'</b>: '+ this.y;}".html_safe
                      = "options.plotOptions.pie.dataLabels = {}".html_safe
                      = "options.plotOptions.pie.dataLabels.formatter = function() {return '<b>'+ this.point.name +'</b>: '+ this.percentage.toFixed()+' %';}".html_safe
                    - else
                      = "options.tooltip.formatter = function() {return '<b>'+ this.x +'</b>: '+ this.y;}".html_safe
          %tr
            %td &nbsp;
          - if q.answers.first && (q.answers.first.response_class == 'integer' || q.answers.first.response_class == 'float')
            - prefix = q.answers.first.text.split('|')[0]
            - suffix = q.answers.first.text.split('|')[1]
            %tr.report_data.report_data_display
              %td
              %td
              %td
                %table
                  %tr{:style => "font-weight:bold;"}
                    %td User Id
                    %td Response
                  - @responses.where(:question_id => q.id).each do |r|
                    %tr
                      %td= r.response_set.user_id
                      %td.table_number
                        = prefix if prefix
                        - if r.integer_value || r.float_value
                          = "%g" % (r.integer_value || r.float_value)
                        - else
                          = r.string_value || r.text_value || r.datetime_value
                          \&nbsp;
                        = suffix if suffix
            %tr
              %td
              %td
              %td
                %table.report_data_functions
                  %tr
                    %td{:style => "font-weight:bold;"} Total
                    %td.table_number
                      = prefix if prefix
                      = "%g" % @responses.where(:question_id => q.id).collect(&:response_value).sum
                      \&nbsp;#{suffix if suffix}
                  %tr
                    %td{:style => "font-weight:bold;"} Min
                    %td.table_number
                      = prefix if prefix
                      = "%g" % @responses.where(:question_id => q.id).collect(&:response_value).min
                      \&nbsp;#{suffix if suffix}
                  %tr
                    %td{:style => "font-weight:bold;"} Max
                    %td.table_number
                      = prefix if prefix
                      = "%g" % @responses.where(:question_id => q.id).collect(&:response_value).max
                      \&nbsp;#{suffix if suffix}
                  %tr
                    %td{:style => "font-weight:bold;"} Average
                    %td.table_number
                      = prefix if prefix
                      = "%g" % @responses.where(:question_id => q.id).collect(&:response_value).average
                      \&nbsp;#{suffix if suffix}
          - elsif q.pick=='any' || q.pick=='one'            
            %tr
              %td
              %td
              %td
                %table.report_data_functions
                  %tr
                    %td{:style => "font-weight:bold;"}
                      Answer
                    %td{:style => "font-weight:bold;"}
                      Count
                  - q.answers.each do |answer| 
                    %tr
                      %td
                        = answer.text
                      %td.table_number
                        = @responses.where(question_id: q.id, answer_id: answer.id).count
          - else
            %tr.report_data.report_data_display
              %td
              %td
              %td
                %table
                  %tr{:style => "font-weight:bold;"}
                    %td User Id
                    %td Response
                  - @responses.where(:question_id => q.id).each do |r|
                    %tr
                      %td= r.response_set.user_id
                      %td
                        - if q.display_type=='stars'
                          - 5.times.each do |index|
                            %input{name: "star#{'d1'+r.id.to_s}", type: "radio", class: "star", disabled: "disabled", checked:  ( (index+1)== r.integer_value ? "checked" : nil )}
                        - else
                          = r.answers.first.text
          %tr
            %td &nbsp;
        - elsif q.answers.first.response_class == 'blob'
          &nbsp;
        - else
          %tr
            %td
            %td
            %td
              %table
                %tr{:style => "font-weight:bold;"}
                  %td User Id
                  %td Response
                - @responses.where(:question_id => q.id).each do |r|
                  %tr
                    %td= r.response_set.user_id
                    %td= r.datetime_value.blank? ? r.response_value : r.response_value.strftime('%m/%d/%y')
          %tr
            %td &nbsp;
